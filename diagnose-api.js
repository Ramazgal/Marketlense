// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Amvera API
require('dotenv').config();
const axios = require('axios');
const dns = require('dns').promises;

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Amvera API\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: API –∫–ª—é—á
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞:');
if (process.env.AMVERA_API_KEY) {
  console.log('   ‚úÖ AMVERA_API_KEY –Ω–∞–π–¥–µ–Ω');
  console.log('   üìè –î–ª–∏–Ω–∞:', process.env.AMVERA_API_KEY.length, '—Å–∏–º–≤–æ–ª–æ–≤');
  console.log('   üîë –ù–∞—á–∞–ª–æ:', process.env.AMVERA_API_KEY.substring(0, 50) + '...');
} else {
  console.log('   ‚ùå AMVERA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: DNS
console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS:');
const domains = [
  'llm.api.amvera.ru',
  'api.amvera.ru',
  'amvera.ru'
];

async function checkDNS() {
  for (const domain of domains) {
    try {
      const addresses = await dns.resolve4(domain);
      console.log(`   ‚úÖ ${domain} ‚Üí ${addresses.join(', ')}`);
    } catch (error) {
      console.log(`   ‚ùå ${domain} ‚Üí ${error.code || error.message}`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
const endpoints = [
  'https://llm.api.amvera.ru/v1/chat/completions',
  'https://api.amvera.ru/v1/chat/completions',
  'https://llm.amvera.ru/v1/chat/completions'
];

async function checkHTTP() {
  for (const url of endpoints) {
    try {
      console.log(`\n   üîó –ü–æ–ø—ã—Ç–∫–∞: ${url}`);
      const response = await axios.post(url, {
        model: 'gpt-4.1',
        messages: [
          { role: 'user', content: 'test' }
        ],
        max_tokens: 5
      }, {
        headers: {
          'X-Auth-Token': `Bearer ${process.env.AMVERA_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000,
        validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
      });
      
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      if (response.status === 200) {
        console.log('   ‚úÖ –£–°–ü–ï–•! API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìù –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2).substring(0, 200));
        return url;
      } else if (response.status === 401) {
        console.log('   ‚ö†Ô∏è  401 Unauthorized - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á');
      } else if (response.status === 404) {
        console.log('   ‚ùå 404 Not Found - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint');
      } else {
        console.log('   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
        console.log('   üìù –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2).substring(0, 200));
      }
    } catch (error) {
      if (error.code === 'ENOTFOUND') {
        console.log(`   ‚ùå DNS –æ—à–∏–±–∫–∞: –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      } else if (error.code === 'ETIMEDOUT') {
        console.log(`   ‚ùå Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç`);
      } else if (error.code === 'ECONNREFUSED') {
        console.log(`   ‚ùå Connection refused: —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API
console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API (–µ—Å–ª–∏ Amvera –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):');
async function checkAlternatives() {
  // OpenRouter API (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å GPT-4)
  console.log('\n   üîó OpenRouter API: https://openrouter.ai/api/v1/chat/completions');
  console.log('   üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenRouter —Å GPT-4');
  
  // Local LLM
  console.log('\n   üîó Local LLM: http://localhost:11434/api/chat (Ollama)');
  console.log('   üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runDiagnostics() {
  await checkDNS();
  const workingEndpoint = await checkHTTP();
  await checkAlternatives();
  
  console.log('\n' + '='.repeat(60));
  
  if (workingEndpoint) {
    console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('üéØ –†–∞–±–æ—á–∏–π endpoint:', workingEndpoint);
  } else {
    console.log('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    console.log('   2. –î–æ–º–µ–Ω llm.api.amvera.ru –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è');
    console.log('   3. API –∫–ª—é—á –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π');
    console.log('   4. –°–µ—Ä–≤–∏—Å Amvera –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Amvera: https://docs.amvera.ru');
    console.log('   2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Amvera');
    console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mock-server.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI');
    console.log('   4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (OpenRouter, local Ollama)');
  }
  
  console.log('='.repeat(60));
}

runDiagnostics().catch(console.error);
